<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<!--
  [cpeisert] This file is a modified version of
  "org/apache/ant/antunit/antlib.xml" from Apache Ant AntUnit 1.2. The changes
  outlined below were made so that IntelliJ IDEA 11.0 would recognize both the
  AntUnit tasks as well as the macros. In AntUnit's original format, IntelliJ
  IDEA 11.0 did not see the macros in antlib.xml.

  FILE CHANGES:

    * Removed all taskdefs and typdefs
    * Add taskdef for resource org/apache/ant/antunit/antlib.xml contained in
          "ant-antunit.jar". NOTE: the copy of antlib.xml contained in
          ant-closure-tools/lib/ant-antunit.jar was modified by removing all
          macros (they are now in this file).
    * Rename AntUnit taskdef "fail" to "antunit-fail"
    * Delete "au" XML namespace prefixes
-->
<project name="antunit-macros">

  <dirname property="lib.dir" file="${ant.file.antunit-macros}" />
  <property name="antunit.jar" value="${lib.dir}/ant-antunit.jar" />

  <taskdef resource="org/apache/ant/antunit/antlib.xml"
      classpath="${antunit.jar}" />

  <!-- Actually just an alias of antunit-fail that expects a condition -->
  <macrodef name="assertTrue" backtrace="false">
    <attribute name="message" default="Assertion failed"/>
    <element name="assertion" implicit="true"/>
    <sequential>
      <antunit-fail message="@{message}">
        <assertion />
      </antunit-fail>
    </sequential>
  </macrodef>

  <macrodef name="assertFalse" backtrace="false">
    <attribute name="message" default="Assertion failed"/>
    <element name="assertion" implicit="true"/>
    <sequential>
      <antunit-fail message="@{message}">
        <not>
          <assertion/>
        </not>
      </antunit-fail>
    </sequential>
  </macrodef>

  <macrodef name="assertEquals" backtrace="false">
    <attribute name="expected"/>
    <attribute name="actual"/>
    <attribute name="casesensitive" default="true"/>
    <attribute name="message"
        default="Expected '@{expected}' but was '@{actual}'"/>
    <sequential>
      <antunit-fail message="@{message}">
        <equals arg1="@{expected}" arg2="@{actual}"
            casesensitive="@{casesensitive}"/>
      </antunit-fail>
    </sequential>
  </macrodef>

  <macrodef name="assertPropertySet" backtrace="false">
    <attribute name="name"/>
    <attribute name="message"
        default="Expected property '@{name}'"/>
    <sequential>
      <antunit-fail message="@{message}">
        <isset property="@{name}"/>
      </antunit-fail>
    </sequential>
  </macrodef>

  <macrodef name="assertPropertyEquals" backtrace="false">
    <attribute name="name"/>
    <attribute name="value"/>
    <attribute name="casesensitive" default="true"/>
    <attribute name="message"
        default="Expected property '@{name}' to have value '@{value}' but was
'${@{name}}'"/>
    <sequential>
      <assertPropertySet message="@{message}" name="@{name}"/>
      <assertEquals message="@{message}" expected="@{value}"
          actual="${@{name}}" casesensitive="@{casesensitive}"/>
    </sequential>
  </macrodef>

  <macrodef name="assertPropertyContains" backtrace="false">
    <attribute name="name"/>
    <attribute name="value"/>
    <attribute name="casesensitive" default="true"/>
    <attribute name="message"
        default="Expected property '@{name}' to contain value '@{value}' but was
'${@{name}}'"/>
    <sequential>
      <assertPropertySet message="@{message}" name="@{name}"/>
      <antunit-fail message="@{message}">
        <contains string="${@{name}}" substring="@{value}"
            casesensitive="@{casesensitive}"/>
      </antunit-fail>
    </sequential>
  </macrodef>

  <macrodef name="assertFileExists" backtrace="false">
    <attribute name="file"/>
    <attribute name="message"
        default="Expected file '@{file}' to exist"/>
    <sequential>
      <antunit-fail message="@{message}">
        <available file="@{file}"/>
      </antunit-fail>
    </sequential>
  </macrodef>

  <macrodef name="assertFileDoesntExist" backtrace="false">
    <attribute name="file"/>
    <attribute name="message"
        default="Didn't expect file '@{file}' to exist"/>
    <sequential>
      <assertFalse message="@{message}">
        <available file="@{file}"/>
      </assertFalse>
    </sequential>
  </macrodef>

  <macrodef name="assertResourceExists" backtrace="false">
    <attribute name="resource"/>
    <attribute name="message"
        default="Expected resource '@{resource}' to exist"/>
    <sequential>
      <antunit-fail message="@{message}">
        <resourceExists resource="@{resource}"/>
      </antunit-fail>
    </sequential>
  </macrodef>

  <macrodef name="assertResourceDoesntExist" backtrace="false">
    <attribute name="resource"/>
    <attribute name="message"
        default="Didn't expect resource '@{resource}' to exist"/>
    <sequential>
      <assertFalse message="@{message}">
        <resourceExists resource="@{resource}"/>
      </assertFalse>
    </sequential>
  </macrodef>

  <macrodef name="assertResourceContains">
    <attribute name="resource"/>
    <attribute name="value"/>
    <attribute name="casesensitive" default="true"/>
    <attribute name="message"
        default="Expected resource '@{resource}' to contain value '@{value}'
but was '${@{resource}}'"/>
    <sequential>
      <assertResourceExists resource="@{resource}"/>
      <antunit-fail message="@{message}">
        <resourcecontains resource="@{resource}" substring="@{value}"
            casesensitive="@{casesensitive}"/>
      </antunit-fail>
    </sequential>
  </macrodef>

  <macrodef name="assertResourceDoesntContain">
    <attribute name="resource"/>
    <attribute name="value"/>
    <attribute name="casesensitive" default="true"/>
    <attribute name="message"
        default="Didn't expect resource '@{resource}' to contain value
'@{value}' but was '${@{resource}}'"/>
    <sequential>
      <assertFalse message="@{message}">
        <resourcecontains resource="@{resource}" substring="@{value}"
            casesensitive="@{casesensitive}"/>
      </assertFalse>
    </sequential>
  </macrodef>

  <macrodef name="assertDestIsUptodate" backtrace="false">
    <attribute name="src"/>
    <attribute name="dest"/>
    <attribute name="message"
        default="Expected '@{dest}' to be more recent than '@{src}'"/>
    <sequential>
      <antunit-fail message="@{message}">
        <uptodate srcfile="@{src}" targetfile="@{dest}"/>
      </antunit-fail>
    </sequential>
  </macrodef>

  <macrodef name="assertDestIsOutofdate" backtrace="false">
    <attribute name="src"/>
    <attribute name="dest"/>
    <attribute name="message"
        default="Expected '@{src}' to be more recent than '@{dest}'"/>
    <sequential>
      <assertFalse message="@{message}">
        <uptodate srcfile="@{src}" targetfile="@{dest}"/>
      </assertFalse>
    </sequential>
  </macrodef>

  <macrodef name="assertFilesMatch" backtrace="false">
    <attribute name="expected"/>
    <attribute name="actual"/>
    <attribute name="message"
        default="Expected files '@{expected}' and '@{actual}' to match"/>
    <sequential>
      <antunit-fail message="@{message}">
        <filesmatch file1="@{expected}" file2="@{actual}"/>
      </antunit-fail>
    </sequential>
  </macrodef>

  <macrodef name="assertFilesDiffer" backtrace="false">
    <attribute name="expected"/>
    <attribute name="actual"/>
    <attribute name="message"
        default="Expected files '@{expected}' and '@{actual}' to differ"/>
    <sequential>
      <assertFalse message="@{message}">
        <filesmatch file1="@{expected}" file2="@{actual}"/>
      </assertFalse>
    </sequential>
  </macrodef>

  <macrodef name="assertReferenceSet" backtrace="false">
    <attribute name="refid"/>
    <attribute name="message"
        default="Expected reference '@{refid}'"/>
    <sequential>
      <antunit-fail message="@{message}">
        <isreference refid="@{refid}"/>
      </antunit-fail>
    </sequential>
  </macrodef>

  <macrodef name="assertReferenceIsType" backtrace="false">
    <attribute name="refid"/>
    <attribute name="type"/>
    <attribute name="message"
        default="Expected reference '@{refid}' to be a '@{type}'"/>
    <sequential>
      <assertReferenceSet refid="@{refid}"/>
      <antunit-fail message="@{message}">
        <isreference refid="@{refid}" type="@{type}"/>
      </antunit-fail>
    </sequential>
  </macrodef>

  <macrodef name="assertLogContains" backtrace="false">
    <attribute name="text"/>
    <attribute name="level" default="info"/>
    <attribute name="message"
        default="Expected log to contain '@{text}' at level @{level}"/>
    <sequential>
      <antunit-fail message="@{message}">
        <logcontains text="@{text}" level="@{level}"/>
      </antunit-fail>
    </sequential>
  </macrodef>

  <macrodef name="assertLogDoesntContain" backtrace="false">
    <attribute name="text"/>
    <attribute name="level" default="info"/>
    <attribute name="message"
        default="Unexpected log '@{text}' at level @{level}"/>
    <sequential>
      <assertFalse message="@{message}">
        <logcontains text="@{text}" level="@{level}"/>
      </assertFalse>
    </sequential>
  </macrodef>

  <macrodef name="assertMatches" backtrace="false">
    <attribute name="string"/>
    <attribute name="pattern"/>
    <attribute name="casesensitive" default="true"/>
    <attribute name="singleline" default="false"/>
    <attribute name="multiline" default="false"/>
    <attribute name="message"
        default="Expected '@{string}' to match pattern '@{pattern}'"/>
    <sequential>
      <antunit-fail message="@{message}">
        <matches string="@{string}" pattern="@{pattern}"
            casesensitive="@{casesensitive}"
            singleline="@{singleline}"
            multiline="@{multiline}"/>
      </antunit-fail>
    </sequential>
  </macrodef>

  <macrodef name="assertDoesntMatch" backtrace="false">
    <attribute name="string"/>
    <attribute name="pattern"/>
    <attribute name="casesensitive" default="true"/>
    <attribute name="singleline" default="false"/>
    <attribute name="multiline" default="false"/>
    <attribute name="message"
        default="Expected '@{string}' to not match pattern '@{pattern}'"/>
    <sequential>
      <antunit-fail message="@{message}">
        <not>
          <matches string="@{string}" pattern="@{pattern}"
              casesensitive="@{casesensitive}"
              singleline="@{singleline}"
              multiline="@{multiline}"/>
        </not>
      </antunit-fail>
    </sequential>
  </macrodef>

</project>
