<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (C) 2012 Christopher Peisert. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<!--
================================================================================
  AntUnit tests for the Builder Plus command line interface.
================================================================================
-->
<project name="builder-plus-cli-test" default="test">

  <dirname property="antunit.dir"
      file="${ant.file.builder-plus-cli-test}" />

  <property name="test.dir" location="${antunit.dir}/.." />
  <property name="test-projects.dir" location="${test.dir}/test_projects" />
  <property name="test.build.dir" location="${test.dir}/build" />

  <property name="closure-ant.dir" location="${test.dir}/.." />
  <property name="closure-ant.lib.dir" location="${closure-ant.dir}/lib" />
  <property name="closure-ant.build.dir"
      location="${closure-ant.dir}/build" />
  <property name="closure-ant-config.xml"
      location="${closure-ant.build.dir}/closure-ant-config.xml" />

  <import file="${closure-ant.lib.dir}/antunit.xml" />
  <import file="${closure-ant-config.xml}" />

  <import file="${test.dir}/test_projects/project101/project101.xml" />
  <import file="${test.dir}/test_projects/project_template/project_template.xml" />

  <property name="builderplus.jar"
      location="${closure-ant.build.dir}/builderplus.jar" />
  <property name="flagfile.txt"
      location="${project101.output.dir}/compiler_flagfile.txt" />

  <path id="test.classpath">
    <fileset dir="${closure-ant.lib.dir}" includes="**/*.jar" />
  </path>

  
  <!--
  =============================================================================
    Set up and tear down
  =============================================================================
  -->

  <!-- Executed once for this test suite before all other targets. -->
  <target name="suiteSetUp">
    <mkdir dir="${test.build.dir}" />
    <mkdir dir="${project101.output.dir}" />

    <mkdir dir="${json-in-style.soy-output.dir}" />
    <mkdir dir="${json-in-style.soy-output.dir}/images" />
    <copy todir="${json-in-style.soy-output.dir}/images">
      <fileset dir="${json-in-style.dir}/images" />
    </copy>

    <mkdir dir="${template.output.dir}" />
    <copy todir="${template.output.dir}">
      <fileset dir="${template.css.dir}" includes="**/*.css" />
      <fileset dir="${template.html.dir}" includes="**/*.html" />
    </copy>
    <mkdir dir="${template.compiled-soy.dir}" />
  </target>


  <!--
  =============================================================================
    Tests
  =============================================================================
  -->

  <target name="testOutputModeRAW">
    <java jar="${builderplus.jar}" fork="true" failonerror="true">
      <arg line="--compiler_jar=${closure-compiler.jar}" />
      <arg line='--output_file="${project101.raw.output.js}"' />
      <arg line="--output_mode 'raw'" />
      <arg line="--namespace '${project101.namespace}'" />
      <arg line='--root "${project101.js.dir}"' />
      <arg line='--root "${closure-library.dir}"' />
    </java>

    <assertFileExists file="${project101.raw.output.js}" />
    <assertResourceContains resource="${project101.raw.output.js}"
        value="project101.displayMessage = function(message)" />
  </target>


  <target name="testKeepMoochers">
    <java jar="${builderplus.jar}" fork="true" failonerror="true">
      <arg line="--compiler_jar=${closure-compiler.jar}" />
      <arg line="--keep_moochers" />
      <arg line='--output_file="${project101.raw.output.js}"' />
      <arg line="--output_mode 'raw'" />
      <arg line="--namespace '${project101.namespace}'" />
      <arg line='--root "${project101.js.dir}"' />
      <arg line='--root "${closure-library.dir}"' />
    </java>

    <assertFileExists file="${project101.raw.output.js}" />
    <assertResourceContains resource="${project101.raw.output.js}"
        value="It is satisfying to mooch off of goog.date.Date" />
  </target>


  <target name="testWhitespaceCompiled">
    <echo file="${flagfile.txt}"
        message="--compilation_level=WHITESPACE_ONLY --formatting=PRETTY_PRINT" />
    <java jar="${builderplus.jar}" fork="true" failonerror="true">
      <arg line="--compiler_jar=${closure-compiler.jar}" />
      <arg line="--force_recompile" />
      <arg line='--output_file="${project101.whitespace-compiled.output.js}"' />
      <arg line="--output_mode 'compiled'" />
      <arg line="--namespace '${project101.namespace}'" />
      <arg line='--root "${project101.js.dir}"' />
      <arg line='--root "${closure-library.dir}"' />
      <arg line='--flagfile "${flagfile.txt}"' />
    </java>

    <assertFileExists file="${project101.whitespace-compiled.output.js}" />
    <assertResourceContains
        resource="${project101.whitespace-compiled.output.js}"
        value="var COMPILED = false;" />
  </target>

  
  <target name="testSimpleCompiled">
    <echo file="${flagfile.txt}"
        message='--compilation_level=SIMPLE_OPTIMIZATIONS
        --formatting=PRETTY_PRINT --define goog.DEBUG=false
        --define goog.LOCALE="de" --jscomp_warning=checkVars
        --logging_level=INFO' />
    <java jar="${builderplus.jar}" fork="true" failonerror="true">
      <arg line="--compiler_jar=${closure-compiler.jar}" />
      <arg line="--force_recompile" />
      <arg line='--output_file="${project101.simple-compiled.output.js}"' />
      <arg line="--output_mode=compiled" />
      <arg line="--namespace '${project101.namespace}'" />
      <arg line='--root "${project101.js.dir}"' />
      <arg line='--root "${closure-library.dir}"' />
      <arg line='--flagfile "${flagfile.txt}"' />
    </java>

    <assertFileExists file="${project101.simple-compiled.output.js}" />

    <!-- Test "define": goog.DEBUG = false -->
    <assertResourceContains
        resource="${project101.simple-compiled.output.js}"
        value="goog.DEBUG = !1" />

    <!-- Test "define": goog.LOCALE = "de" -->
    <assertResourceContains
        resource="${project101.simple-compiled.output.js}"
        value='goog.LOCALE = "de"' />
  </target>

  
  <target name="testAdvancedCompiled">
    <echo file="${flagfile.txt}"
        message='--compilation_level=ADVANCED_OPTIMIZATIONS' />
    <java jar="${builderplus.jar}" fork="true" failonerror="true">
      <arg line="--compiler_jar=${closure-compiler.jar}" />
      <arg line="--force_recompile" />
      <arg line='--output_file="${project101.advanced-compiled.output.js}"' />
      <arg line="--output_mode=compiled" />
      <arg line="--namespace '${project101.namespace}'" />
      <arg line='--root "${project101.js.dir}"' />
      <arg line='--root "${closure-library.dir}"' />
      <arg line='--flagfile "${flagfile.txt}"' />
    </java>

    <assertFileExists file="${project101.advanced-compiled.output.js}" />
  </target>
  

  <target name="testOutputModeMANIFEST">
    <java jar="${builderplus.jar}" fork="true" failonerror="true">
      <arg line="--compiler_jar=${closure-compiler.jar}" />
      <arg line='--output_manifest="${project101.outputManifest}"' />
      <arg line="--output_mode 'MANIFEST'" />
      <arg line="--main_source '${project101.js.dir}/project101.js'" />
      <arg line='--root "${closure-library.dir}"' />
    </java>

    <assertFileExists file="${project101.outputManifest}" />
    <assertResourceContains resource="${project101.outputManifest}"
        value="base.js" />
    <assertResourceContains resource="${project101.outputManifest}"
        value="project101.js" />
  </target>


  <target name="testOutputManifest">
    <property name="base.js"
        location="${closure-library.dir}/closure/goog/base.js" />

    <java jar="${builderplus.jar}" fork="true" failonerror="true">
      <arg line="--compiler_jar=${closure-compiler.jar}" />
      <arg line='--output_manifest="${project101.outputManifest}"' />
      <arg line='--output_file="${project101.raw.output.js}"' />
      <arg line="--output_mode 'raw'" />
      <arg line="--main_source '${project101.js.dir}/project101.js'" />
      <arg line='--root "${closure-library.dir}"' />
    </java>

    <assertFileExists file="${project101.outputManifest}" />

    <pathconvert property="base.js_current-platform">
      <fileset file="${base.js}" />
    </pathconvert>
    <assertResourceContains resource="${project101.outputManifest}"
        value="${base.js_current-platform}" />
    <assertResourceContains resource="${project101.outputManifest}"
        value="project101.js" />
  </target>


  <target name="testSkipCompilationIfOutputFileUpToDate">
    <logcapturer />
    <echo file="${flagfile.txt}"
        message='--compilation_level=WHITESPACE_ONLY --formatting=PRETTY_PRINT' />
    <java jar="${builderplus.jar}" fork="true" failonerror="true">
      <arg line="--compiler_jar=${closure-compiler.jar}" />
      <arg line='--output_file="${project101.whitespace-compiled.output.js}"' />
      <arg line="--output_mode=compiled" />
      <arg line="--namespace '${project101.namespace}'" />
      <arg line='--root "${project101.js.dir}"' />
      <arg line='--root "${closure-library.dir}"' />
      <arg line='--flagfile "${flagfile.txt}"' />
    </java>

    <!-- Compilation should be skipped. -->
    <java jar="${builderplus.jar}" fork="true" failonerror="true">
      <arg line="--compiler_jar=${closure-compiler.jar}" />
      <arg line='--output_file="${project101.whitespace-compiled.output.js}"' />
      <arg line="--output_mode=compiled" />
      <arg line="--namespace '${project101.namespace}'" />
      <arg line='--root "${project101.js.dir}"' />
      <arg line='--root "${closure-library.dir}"' />
      <arg line='--flagfile "${flagfile.txt}"' />
    </java>

    <assertLogContains text="Output file up-to-date. Compilation skipped." />
  </target>


  <target name="testAutoInclude_soyutils_usegoog">
    <closure-templates>
      <soyfileset dir="${template.soy.dir}" includes="**/*.soy" />
      <compiletojs codeStyle="STRINGBUILDER"
          outputPathFormat="${template.compiled-soy.dir}/{INPUT_FILE_NAME_NO_EXT}.js"
          shouldGenerateJsdoc="true"
          shouldProvideRequireSoyNamespaces="true" />
    </closure-templates>

    <echo file="${flagfile.txt}"
        message='--compilation_level=SIMPLE_OPTIMIZATIONS
        --formatting=PRETTY_PRINT --warning_level=VERBOSE' />
    <java jar="${builderplus.jar}" fork="true" failonerror="true">
      <arg line="--compiler_jar=${closure-compiler.jar}" />
      <arg line="--force_recompile" />
      <arg line='--output_file="${template.compiled.js}"' />
      <arg line="--output_mode=compiled" />
      <arg line='--main_source="${template.js.dir}/template.js"' />
      <arg line='--main_source="${template.compiled-soy.dir}/soy-template.js"' />
      <arg line='--root "${closure-library.dir}"' />
      <arg line='--flagfile "${flagfile.txt}"' />
    </java>
  </target>


  <!--
  =============================================================================
    Tests for CSS renaming map flags.
  =============================================================================
  -->

  <import file="${test-projects.dir}/json-in-style/jsonInStyle.xml" />
  <property name="manifest.CLOSURE_COMPILED.txt"
      location="${json-in-style.soy-output.dir}/manifest_closure_compiled.txt" />
  <property name="manifest.CLOSURE_UNCOMPILED.txt"
      location="${json-in-style.soy-output.dir}/manifest_closure_uncompiled.txt" />


  <target name="testInputCssRenamingMapCLOSURE_COMPILED">
    <closure-stylesheets outputFile="${json-in-style.soy-output.css}"
        outputRenamingMap="${json-in-style.soy.outputRenamingMap_CLOSURE_COMPILED}"
        outputRenamingMapFormat="CLOSURE_COMPILED"
        renamingType="CLOSURE"
        prettyPrint="true">
      <cssfileset dir="${json-in-style.dir}/gss" includes="*.gss" />
    </closure-stylesheets>

    <java jar="${builderplus.jar}" fork="true" failonerror="true">
      <arg line='--css_renaming_map="${json-in-style.soy.outputRenamingMap_CLOSURE_COMPILED}"' />
      <arg line='--compiler_jar="${closure-compiler.jar}"' />
      <arg line='--output_manifest="${manifest.CLOSURE_COMPILED.txt}"' />
      <arg line='--output_file="${json-in-style.soy.compiled.js}"' />
      <arg line="--output_mode MANIFEST" />
      <arg line='--main_source "${json-in-style.js.dir}/jsonstylemanager.js"' />
      <arg line='--main_source "${json-in-style.js.dir}/main.js"' />
      <arg line='--root "${closure-library.dir}"' />
    </java>

    <assertFileExists file="${manifest.CLOSURE_COMPILED.txt}" />
    <assertResourceContains resource="${manifest.CLOSURE_COMPILED.txt}"
        value="css_renaming_map_CLOSURE_COMPILED.js" />
  </target>


  <target name="testInputCssRenamingMapCLOSURE_UNCOMPILED">
    <closure-stylesheets outputFile="${json-in-style.soy-output.css}"
        outputRenamingMap="${json-in-style.soy.outputRenamingMap_CLOSURE_UNCOMPILED}"
        outputRenamingMapFormat="CLOSURE_UNCOMPILED"
        renamingType="CLOSURE"
        prettyPrint="true">
      <cssfileset dir="${json-in-style.dir}/gss" includes="*.gss" />
    </closure-stylesheets>

    <java jar="${builderplus.jar}" fork="true" failonerror="true">
      <arg line='--css_renaming_map="${json-in-style.soy.outputRenamingMap_CLOSURE_UNCOMPILED}"' />
      <arg line='--compiler_jar="${closure-compiler.jar}"' />
      <arg line='--output_manifest="${manifest.CLOSURE_COMPILED.txt}"' />
      <arg line='--output_file="${json-in-style.soy.compiled.js}"' />
      <arg line="--output_mode MANIFEST" />
      <arg line='--main_source "${json-in-style.js.dir}/jsonstylemanager.js"' />
      <arg line='--main_source "${json-in-style.js.dir}/main.js"' />
      <arg line='--root "${closure-library.dir}"' />
    </java>

    <assertFileExists file="${manifest.CLOSURE_COMPILED.txt}" />
    <assertResourceContains resource="${manifest.CLOSURE_COMPILED.txt}"
        value="css_renaming_map_CLOSURE_COMPILED.js" />
  </target>


  <target name="testInputCssRenamingMapJSON">
    <closure-stylesheets outputFile="${json-in-style.soy-output.css}"
        outputRenamingMap="${json-in-style.soy.outputRenamingMap_JSON}"
        outputRenamingMapFormat="JSON"
        renamingType="CLOSURE"
        prettyPrint="true">
      <cssfileset dir="${json-in-style.dir}/gss" includes="*.gss" />
    </closure-stylesheets>

    <java jar="${builderplus.jar}" fork="true" failonerror="true">
      <arg line='--css_renaming_map="${json-in-style.soy.outputRenamingMap_JSON}"' />
      <arg line='--compiler_jar="${closure-compiler.jar}"' />
      <arg line='--output_manifest="${manifest.CLOSURE_COMPILED.txt}"' />
      <arg line='--output_file="${json-in-style.soy.compiled.js}"' />
      <arg line="--output_mode COMPILED" />
      <arg line='--main_source "${json-in-style.js.dir}/jsonstylemanager.js"' />
      <arg line='--main_source "${json-in-style.js.dir}/main.js"' />
      <arg line='--root "${closure-library.dir}"' />
    </java>

    <assertFileExists file="${manifest.CLOSURE_COMPILED.txt}" />
    <assertResourceContains resource="${manifest.CLOSURE_COMPILED.txt}"
        value="css_renaming_map_CLOSURE_COMPILED.js" />
  </target>


  <target name="testInputCssRenamingMapPROPERTIES">
    <closure-stylesheets
        outputFile="${json-in-style.soy-output.css}"
        outputRenamingMap="${json-in-style.soy.outputRenamingMap_PROPERTIES}"
        outputRenamingMapFormat="PROPERTIES"
        renamingType="CLOSURE"
        prettyPrint="true">
      <cssfileset dir="${json-in-style.dir}/gss" includes="*.gss" />
    </closure-stylesheets>

    <java jar="${builderplus.jar}" fork="true" failonerror="true">
      <arg line='--css_renaming_map_properties_file="${json-in-style.soy.outputRenamingMap_PROPERTIES}"' />
      <arg line='--compiler_jar="${closure-compiler.jar}"' />
      <arg line='--output_manifest="${manifest.CLOSURE_COMPILED.txt}"' />
      <arg line='--output_file="${json-in-style.soy.compiled.js}"' />
      <arg line="--output_mode MANIFEST" />
      <arg line='--main_source "${json-in-style.js.dir}/jsonstylemanager.js"' />
      <arg line='--main_source "${json-in-style.js.dir}/main.js"' />
      <arg line='--root "${closure-library.dir}"' />
    </java>

    <assertFileExists file="${manifest.CLOSURE_COMPILED.txt}" />
    <assertResourceContains resource="${manifest.CLOSURE_COMPILED.txt}"
        value="css_renaming_map_CLOSURE_COMPILED.js" />
  </target>


  <target name="testErrorCssRenamingMapSpecifiedAsPropertiesAndJSON">
    <closure-stylesheets
        outputFile="${json-in-style.soy-output.css}"
        outputRenamingMap="${json-in-style.soy.outputRenamingMap_PROPERTIES}"
        outputRenamingMapFormat="PROPERTIES"
        renamingType="CLOSURE"
        prettyPrint="true">
      <cssfileset dir="${json-in-style.dir}/gss" includes="*.gss" />
    </closure-stylesheets>

    <closure-stylesheets outputFile="${json-in-style.soy-output.css}"
        outputRenamingMap="${json-in-style.soy.outputRenamingMap_JSON}"
        outputRenamingMapFormat="JSON"
        renamingType="CLOSURE"
        prettyPrint="true">
      <cssfileset dir="${json-in-style.dir}/gss" includes="*.gss" />
    </closure-stylesheets>

    <expectfailure>
      <!-- May not specify both JSON and Properties file renaming maps. -->
      <java jar="${builderplus.jar}" fork="true" failonerror="true">
        <arg line='--css_renaming_map="${json-in-style.soy.outputRenamingMap_JSON}"' />
        <arg line='--css_renaming_map_properties_file="${json-in-style.soy.outputRenamingMap_PROPERTIES}"' />
        <arg line='--compiler_jar="${closure-compiler.jar}"' />
        <arg line='--output_manifest="${manifest.CLOSURE_COMPILED.txt}"' />
        <arg line='--output_file="${json-in-style.soy.compiled.js}"' />
        <arg line="--output_mode MANIFEST" />
        <arg line='--main_source "${json-in-style.js.dir}/jsonstylemanager.js"' />
        <arg line='--main_source "${json-in-style.js.dir}/main.js"' />
        <arg line='--root "${closure-library.dir}"' />
      </java>
    </expectfailure>
  </target>

  
  <!-- Run this test suite. -->
  <target name="test">
    <antunit>
      <file file="${antunit.dir}/BuilderPlusCLITest.xml" />
      <plainlistener loglevel="info" />
    </antunit>
  </target>
</project>
