<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (C) 2012 Christopher Peisert. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<!--
================================================================================
  AntUnit tests for Closure Stylesheets.
================================================================================
-->
<project name="closure-stylesheets-test" default="test">

  <dirname property="antunit.dir" file="${ant.file.closure-stylesheets-test}" />

  <property name="test.dir" location="${antunit.dir}/.." />
  <property name="test-projects.dir" location="${test.dir}/test_projects" />
  <property name="test.build.dir" location="${test.dir}/build" />
  <property name="test.lib.dir" location="${test.dir}/lib" />
  <import file="${test.lib.dir}/antunit.xml" />

  <property name="closure-ant-tasks.dir" location="${test.dir}/.." />
  <property name="closure-ant-tasks.lib.dir"
      location="${closure-ant-tasks.dir}/lib" />
  <property name="closure-ant-tasks.build.dir"
      location="${closure-ant-tasks.dir}/build" />
  <property name="closure-tools-config.xml"
      location="${closure-ant-tasks.build.dir}/closure-tools-config.xml" />
  <import file="${closure-tools-config.xml}" />

  <import file="${test-projects.dir}/json-in-style/jsonInStyle.xml" />

  
  <!--
  =============================================================================
    Set up and tear down
  =============================================================================
  -->

  <!-- Executed once for this test suite before all other targets. -->
  <target name="suiteSetUp">
    <mkdir dir="${test.build.dir}" />
    <mkdir dir="${json-in-style.output.dir}" />
    <copy file="${json-in-style.index.html}"
        todir="${json-in-style.output.dir}" />
    <mkdir dir="${json-in-style.output.dir}/images" />
    <copy todir="${json-in-style.output.dir}/images">
      <fileset dir="${json-in-style.dir}/images" />
    </copy>

    <!-- json-in-style based on index.soy rather than index.html -->
    <mkdir dir="${json-in-style.soy-output.dir}" />
    <mkdir dir="${json-in-style.soy-output.dir}/images" />
    <copy todir="${json-in-style.soy-output.dir}/images">
      <fileset dir="${json-in-style.dir}/images" />
    </copy>
  </target>

  <target name="json-in-style.jsCompile">
    <builder-plus outputMode="COMPILED"
        outputFile="${json-in-style.output.js}">
      <compiler compilationLevel="advanced" warninglevel="verbose" />
      <mainsources dir="${json-in-style.js.dir}" includes="**/*.js" />
      <root directory="${closure-library.dir}" />
    </builder-plus>
  </target>


  <!--
  =============================================================================
    Tests
  =============================================================================
  -->


  <target name="testCompileGSS" depends="json-in-style.jsCompile">
    <stylesheets
        copyrightNotice="${copyright}"
        forceRecompile="true"
        inputOrientation="ltr"
        outputFile="${json-in-style.output.css}"
        outputOrientation="ltr"
        prettyPrint="true">
      <allowednonstandardfunctions functionList="randomColor" />
      <cssfileset dir="${json-in-style.dir}/gss" includes="*.gss" />
    </stylesheets>

    <assertFileExists file="${json-in-style.output.css}" />
    <assertResourceContains resource="${json-in-style.output.css}"
        value="Copyright (C) 2012 Christopher Peisert" />
  </target>


  <target name="testSkipCompilationIfOutputFileUpToDate"
      depends="json-in-style.jsCompile">
    <logcapturer />

    <!-- First build. -->
    <stylesheets
        outputFile="${json-in-style.output.css}"
        prettyPrint="true">
      <cssfileset dir="${json-in-style.dir}/gss" includes="*.gss" />
    </stylesheets>

    <!-- Second build should be skipped. -->
    <stylesheets
        outputFile="${json-in-style.output.css}"
        prettyPrint="true">
      <cssfileset dir="${json-in-style.dir}/gss" includes="*.gss" />
    </stylesheets>

    <assertLogContains text="Stylesheet compilation skipped." />
  </target>


  <target name="testCustomGssFunctionMapProvider">
    <!-- Make sure the test sources have been compiled. -->
    <ant dir="${test.dir}" target="compile" />

    <stylesheets
        classpath="${test.build.dir}/classes"
        functionMapProvider="org.closureextensions.css.CustomGssFunctionMapProvider"
        forceRecompile="true" outputFile="${json-in-style.output.css}"
        prettyPrint="true">
      <allowednonstandardfunctions functionList="randomColor" />
      <cssfileset dir="${json-in-style.dir}/gss" includes="*.gss" />
      <definetrueconditionals trueConditionalsList="USING_CUSTOM_FUNCTIONS" />
    </stylesheets>

    <assertFileExists file="${json-in-style.output.css}" />

    <!-- If the true-condition USING_CUSTOM_FUNCTIONS is successfully set,
      then the background color should be set by a call to randomColor('light')
      and therefore the background color will not equal the default #faf9ff. -->
    <assertResourceDoesntContain resource="${json-in-style.output.css}"
        value="background-color: #faf9ff" />
  </target>


  <!--
  ******************************************************************************
    CSS class renaming tests.
  ******************************************************************************
  -->

  <!--
    Helper targets.
  -->

  <target name="createCssRenamingMap_CLOSURE_COMPILED">
    <stylesheets outputFile="${json-in-style.soy-output.css}"
        outputRenamingMap="${json-in-style.outputRenamingMap_CLOSURE_COMPILED}"
        outputRenamingMapFormat="CLOSURE_COMPILED"
        renamingType="CLOSURE"
        prettyPrint="true">
      <cssfileset dir="${json-in-style.dir}/gss" includes="*.gss" />
    </stylesheets>
  </target>

  <target name="createCssRenamingMap_CLOSURE_UNCOMPILED">
    <stylesheets outputFile="${json-in-style.soy-output.css}"
        outputRenamingMap="${json-in-style.outputRenamingMap_CLOSURE_UNCOMPILED}"
        outputRenamingMapFormat="CLOSURE_COMPILED"
        renamingType="CLOSURE"
        prettyPrint="true">
      <cssfileset dir="${json-in-style.dir}/gss" includes="*.gss" />
    </stylesheets>
  </target>

  <target name="createCssRenamingMap_JSON">
    <stylesheets outputFile="${json-in-style.soy-output.css}"
        outputRenamingMap="${json-in-style.outputRenamingMap_JSON}"
        outputRenamingMapFormat="JSON"
        renamingType="CLOSURE"
        prettyPrint="true">
      <cssfileset dir="${json-in-style.dir}/gss" includes="*.gss" />
    </stylesheets>
  </target>

  <target name="json-in-style.jscomp_ADVANCED"
      depends="createCssRenamingMap_CLOSURE_COMPILED">
    <builder-plus outputMode="COMPILED"
        outputFile="${json-in-style.soy.compiled.js}">
      <compiler compilationLevel="advanced" warninglevel="verbose" />
      <mainsources file="${json-in-style.outputRenamingMap_CLOSURE_COMPILED}" />
      <mainsources dir="${json-in-style.js.dir}" includes="**/*.js" />
      <root directory="${closure-library.dir}" />
    </builder-plus>
  </target>

  <target name="json-in-style.jscomp_RAW">
    <builder-plus outputMode="RAW"
        outputFile="${json-in-style.soy.raw.js}">
      <mainsources dir="${json-in-style.js.dir}" includes="**/*.js" />
      <root directory="${closure-library.dir}" />
    </builder-plus>
  </target>


  <!--
    Tests.
  -->

  <target name="testClassRenaming_CLOSURE_COMPILED"
      depends="createCssRenamingMap_JSON, json-in-style.jscomp_ADVANCED">

    <soy
        cssHandlingScheme="goog"
        cssRenamingMap="${json-in-style.outputRenamingMap_JSON}">
      <soyfileset dir="${json-in-style.soy.dir}" includes="**/*.soy" />
      <rendertemplate
          outputPathFormat="${json-in-style.soy-output.html}"
          templateName="jsonstyle.createIndexHtml">
        <data json="{'scriptFiles': ['${json-in-style.soy.compiled.js}']}" />
      </rendertemplate>
    </soy>


  </target>


  <target name="testClassRenaming_CLOSURE_UNCOMPILED"
      depends="createCssRenamingMap_JSON, json-in-style.jscomp_RAW">

   <!-- <soy
        cssHandlingScheme="goog"
        cssRenamingMap="${json-in-style.outputRenamingMap_JSON}">
      <soyfileset dir="${json-in-style.soy.dir}" includes="**/*.soy" />
      <rendertemplate
          outputPathFormat="${json-in-style.soy-output.html}"
          templateName="jsonstyle.createIndexHtml">
        <data json="{'scriptFiles': ['${json-in-style.soy.raw.js}']}" />
      </rendertemplate>
    </soy>-->


  </target>

  
  <!-- Run this test suite. -->
  <target name="test">
    <antunit>
      <file file="${antunit.dir}/ClosureStylesheetsTest.xml" />
      <plainlistener loglevel="info" />
    </antunit>
  </target>
</project>
