<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (C) 2012 Christopher Peisert. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<!--
================================================================================
  AntUnit tests for Closure Stylesheets.
================================================================================
-->
<project name="closure-linter-test" default="test">

  <dirname property="antunit.dir" file="${ant.file.closure-linter-test}" />

  <property name="test.dir" location="${antunit.dir}/.." />
  <property name="test-projects.dir" location="${test.dir}/test_projects" />
  <property name="test.build.dir" location="${test.dir}/build" />
  <property name="linter_test.dir" location="${test-projects.dir}/linter_test" />

  <property name="closure-ant.dir" location="${test.dir}/.." />
  <property name="closure-ant.lib.dir"
      location="${closure-ant.dir}/lib" />
  <property name="closure-ant.build.dir"
      location="${closure-ant.dir}/build" />
  <property name="closure-ant-config.xml"
      location="${closure-ant.build.dir}/closure-ant-config.xml" />

  <import file="${closure-ant.lib.dir}/antunit.xml" />
  <import file="${closure-ant-config.xml}" />

  <import file="${test-projects.dir}/project101/project101.xml" />


  <!--
  ==============================================================================
    Set up and tear down
  ==============================================================================
  -->

  <!-- Executed once for this test suite before all other targets. -->
  <target name="suiteSetUp">
    <mkdir dir="${test.build.dir}" />
    <mkdir dir="${test.build.dir}/antunit" />
    <mkdir dir="${project101.output.dir}" />
  </target>


  <!--
  ==============================================================================
    Tests
  ==============================================================================
  -->


  <target name="testLintNoErrors">
    <closure-linter force="true" logfile="${test.build.dir}/antunit/linter.log">
      <closurelintererrors all="true" />
      <mainsources dir="${project101.js.dir}" includes="project101.js" />
      <sources dir="${project101.js.dir}" includes="moocher.js" />
    </closure-linter>

    <assertResourceExists resource="${test.build.dir}/antunit/linter.log" />
    <assertResourceContains resource="${test.build.dir}/antunit/linter.log"
        value="no errors found" />
  </target>


  <target name="testCheckJavaScriptInHtmlFile">
    <expectfailure>
      <closure-linter checkJsInHtmlFiles="true" force="true"
          linterMode="lint" showCommandLine="true"
          logfile="${test.build.dir}/antunit/linter.log">
        <closurelintererrors all="true" />
        <mainsources dir="${linter_test.dir}" includes="*.html" />
      </closure-linter>
    </expectfailure>

    <assertResourceExists resource="${test.build.dir}/antunit/linter.log" />
    <assertResourceContains resource="${test.build.dir}/antunit/linter.log"
        value="${linter_test.dir}/index.html" />
    <assertResourceContains resource="${test.build.dir}/antunit/linter.log"
        value="E:0240: @param descriptions must end with valid punctuation" />
  </target>


  <target name="testIgnoreJavaScriptInHtmlFile">
    <closure-linter checkJsInHtmlFiles="false" force="true"
        linterMode="lint" showCommandLine="true"
        logfile="${test.build.dir}/antunit/linter.log">
      <closurelintererrors all="true" />
      <mainsources dir="${linter_test.dir}" includes="*.html" />
    </closure-linter>

    <assertResourceExists resource="${test.build.dir}/antunit/linter.log" />
    <assertResourceContains resource="${test.build.dir}/antunit/linter.log"
        value="${linter_test.dir}/index.html" />
    <assertResourceContains resource="${test.build.dir}/antunit/linter.log"
        value="no errors found" />
  </target>


  <target name="testDebugIndentation">
    <expectfailure>
      <closure-linter force="true"
          linterMode="lint" showCommandLine="true"
          logfile="${test.build.dir}/antunit/linter.log">
        <mainsources dir="${linter_test.dir}" includes="indentation_errors.js" />
        <closurelintererrors debugIndentation="true" indentation="true" />
      </closure-linter>
    </expectfailure>

    <assertResourceExists resource="${test.build.dir}/antunit/linter.log" />
    <assertResourceContains resource="${test.build.dir}/antunit/linter.log"
        value="${linter_test.dir}/indentation_errors.js" />
    <assertResourceContains resource="${test.build.dir}/antunit/linter.log"
        value="Line #1: stack []" />
  </target>


  <target name="testDebugTokens">
    <expectfailure>
      <closure-linter debugTokens="true" force="true"
          linterMode="lint" showCommandLine="true"
          logfile="${test.build.dir}/antunit/linter.log">
        <mainsources dir="${linter_test.dir}" includes="lint_errors.js" />
      </closure-linter>
    </expectfailure>

    <assertResourceExists resource="${test.build.dir}/antunit/linter.log" />
    <assertResourceContains resource="${test.build.dir}/antunit/linter.log"
        value="${linter_test.dir}/lint_errors.js" />
    <assertResourceContains resource="${test.build.dir}/antunit/linter.log"
        value="&lt;JavaScriptToken: 1" />
  </target>


  <target name="testSkipIfUpToDate">
    <logcapturer />
    <closure-linter logfile="${test.build.dir}/antunit/linter.log">
      <mainsources dir="${project101.js.dir}" includes="project101.js" />
      <sources dir="${project101.js.dir}" includes="moocher.js" />
    </closure-linter>

    <!-- This invocation should skip linting. -->
    <closure-linter logfile="${test.build.dir}/antunit/linter.log">
      <mainsources dir="${project101.js.dir}" includes="project101.js" />
      <sources dir="${project101.js.dir}" includes="moocher.js" />
    </closure-linter>

    <assertLogContains
      text="None of the source files or linter settings changed. Linting skipped." />
  </target>


  <target name="testTimingStats">
    <closure-linter timingstats="true"
        force="true" logfile="${test.build.dir}/antunit/linter.log">
      <closurelintererrors all="true" />
      <mainsources dir="${project101.js.dir}" includes="project101.js" />
      <sources dir="${project101.js.dir}" includes="moocher.js" />
    </closure-linter>

    <assertResourceExists resource="${test.build.dir}/antunit/linter.log" />
    <assertResourceContains resource="${test.build.dir}/antunit/linter.log"
        value="Done in" />
  </target>


  <target name="testUnixMode">
    <expectfailure>
      <closure-linter unixmode="true" force="true"
          linterMode="lint" showCommandLine="true"
          logfile="${test.build.dir}/antunit/linter.log">
        <mainsources dir="${linter_test.dir}" includes="indentation_errors.js" />
        <closurelintererrors all="true" />
      </closure-linter>
    </expectfailure>

    <assertResourceExists resource="${test.build.dir}/antunit/linter.log" />
    <assertResourceContains resource="${test.build.dir}/antunit/linter.log"
        value="(New Error 0006)" />
  </target>


  <target name="testJsFileExt_Roots_CustomJsDocTag">
    <expectfailure>
      <closure-linter force="true"
          linterMode="lint" showCommandLine="true"
          logfile="${test.build.dir}/antunit/linter.log">
        <jsfileextensionlist fileextensions="foo" />
        <roots dir="${linter_test.dir}" />
        <closurelintererrors all="true" />
      </closure-linter>
    </expectfailure>

    <assertResourceExists resource="${test.build.dir}/antunit/linter.log" />
    <assertResourceContains resource="${test.build.dir}/antunit/linter.log"
        value="file_ext_test.foo" />
    <assertResourceContains resource="${test.build.dir}/antunit/linter.log"
        value="Invalid JsDoc tag: mydoctag" />
  </target>


  <target name="testNonStandardJsFileExtSpecifiedAsMainSource">
    <expectfailure>
      <closure-linter force="true"
          linterMode="lint" showCommandLine="true"
          logfile="${test.build.dir}/antunit/linter.log">
        <mainsources dir="${linter_test.dir}" includes="*.foo" />
        <closurelintererrors all="true" />
      </closure-linter>
    </expectfailure>
  </target>


  <target name="testCustomJsDocTag">
    <expectfailure>
      <closure-linter force="true"
          linterMode="lint" showCommandLine="true"
          logfile="${test.build.dir}/antunit/linter.log">
        <customjsdoctaglist doctags="mydoctag" />
        <mainsources dir="${linter_test.dir}" includes="indentation_errors.js" />
        <closurelintererrors all="true" />
      </closure-linter>
    </expectfailure>

    <assertResourceExists resource="${test.build.dir}/antunit/linter.log" />
    <assertResourceDoesntContain resource="${test.build.dir}/antunit/linter.log"
        value="Invalid JsDoc tag: mydoctag" />
  </target>


  <target name="testNamespaceList">
    <expectfailure>
      <closure-linter force="true"
          linterMode="lint" showCommandLine="true"
          logfile="${test.build.dir}/antunit/linter.log">
        <closurelintererrors all="true" />
        <namespacelist namespaces="lint.namespace, not.goog.provided" />
        <sources dir="${linter_test.dir}" includes="namespace.js" />
      </closure-linter>
    </expectfailure>

    <assertResourceExists resource="${test.build.dir}/antunit/linter.log" />
    <assertResourceContains resource="${test.build.dir}/antunit/linter.log"
        value="goog.provide('not.goog.provided');" />
  </target>


  <target name="testSourcesWithRelaxedDocumentationChecks">
    <expectfailure>
      <closure-linter force="true"
          linterMode="lint" showCommandLine="true"
          logfile="${test.build.dir}/antunit/linter.log">
        <sourceswithrelaxeddocchecks dir="${linter_test.dir}" includes="*.js" />
        <closurelintererrors all="true" />
      </closure-linter>
    </expectfailure>
  </target>


  <!-- Run this test suite. -->
  <target name="test">
    <antunit>
      <file file="${antunit.dir}/ClosureLinterTest.xml" />
      <plainlistener loglevel="info" />
    </antunit>
  </target>
</project>
