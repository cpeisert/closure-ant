<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (C) 2012 Christopher Peisert. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<!--
================================================================================
  AntUnit tests for Builder Plus.
================================================================================
-->
<project name="builder-plus-test" default="test">

  <dirname property="antunit.dir" 
      file="${ant.file.builder-plus-test}" />

  <property name="test.dir" location="${antunit.dir}/.." />
  <property name="test-projects.dir" location="${test.dir}/test_projects" />
  <property name="test.build.dir" location="${test.dir}/build" />
  <property name="test.lib.dir" location="${test.dir}/lib" />
  <import file="${test.lib.dir}/antunit.xml" />

  <property name="closure-ant-tasks.dir" location="${test.dir}/.." />
  <property name="closure-ant-tasks.lib.dir" location="${closure-ant-tasks.dir}/lib" />
  <property name="closure-ant-tasks.build.dir"
      location="${closure-ant-tasks.dir}/build" />
  <property name="closure-tools-config.xml"
      location="${closure-ant-tasks.build.dir}/closure-tools-config.xml" />
  <import file="${closure-tools-config.xml}" />

  <path id="test.classpath">
    <fileset dir="${closure-ant-tasks.lib.dir}" includes="**/*.jar" />
    <fileset dir="${test.lib.dir}" includes="**/*.jar" />
  </path>

  <import file="${test.dir}/test_projects/project101/project101.xml" />

  
  <!--
  =============================================================================
    Set up and tear down
  =============================================================================
  -->

  <!-- Executed once for this test suite before all other targets. -->
  <target name="suiteSetUp">
    <mkdir dir="${test.build.dir}" />
    <mkdir dir="${project101.output.dir}" />

    <mkdir dir="${json-in-style.soy-output.dir}" />
    <mkdir dir="${json-in-style.soy-output.dir}/images" />
    <copy todir="${json-in-style.soy-output.dir}/images">
      <fileset dir="${json-in-style.dir}/images" />
    </copy>
  </target>


  <!--
  =============================================================================
    Tests
  =============================================================================
  -->

  <target name="test_outputMode=RAW">
    <builder-plus outputMode="raw"
        outputfile="${project101.raw.output.js}">
      <namespacelist namespaces="${project101.namespace}" />
      <roots dir="${project101.js.dir}" />
      <roots dir="${closure-library.dir}" />
    </builder-plus>

    <assertFileExists file="${project101.raw.output.js}" />
    <assertResourceContains resource="${project101.raw.output.js}"
        value="project101.displayMessage = function(message)" />
  </target>


  <target name="test_keepMoochers">
    <builder-plus outputMode="raw"
        keepMoochers="true"
        outputfile="${project101.raw.output.js}">
      <namespacelist namespaces="${project101.namespace}" />
      <roots dir="${project101.js.dir}" />
      <roots dir="${closure-library.dir}" />
    </builder-plus>

    <assertFileExists file="${project101.raw.output.js}" />
    <assertResourceContains resource="${project101.raw.output.js}"
        value="It is satisfying to mooch off of goog.date.Date" />
  </target>


  <target name="test_whitespace-compiled">
    <builder-plus outputMode="compiled" forceRecompile="true"
        outputFile="${project101.whitespace-compiled.output.js}">
      <namespacelist namespaces="${project101.namespace}" />
      <roots dir="${project101.js.dir}" />
      <roots dir="${closure-library.dir}" />
      <compiler compilationLevel="WHITESPACE" prettyPrint="true">
      </compiler>
    </builder-plus>

    <assertFileExists file="${project101.whitespace-compiled.output.js}" />
    <assertResourceContains
        resource="${project101.whitespace-compiled.output.js}"
        value="var COMPILED = false;" />
  </target>

  
  <target name="test_simple-compiled">
    <builder-plus outputMode="compiled" forceRecompile="true"
        outputFile="${project101.simple-compiled.output.js}">
      <namespacelist namespaces="${project101.namespace}" />
      <roots dir="${project101.js.dir}" />
      <roots dir="${closure-library.dir}" />
      <compiler compilationLevel="SIMPLE" prettyPrint="true">
        <define name="goog.DEBUG" value="false" type="boolean" />
        <define name="goog.LOCALE" value="de" type="string" />
        <compilercheck name="checkVars" value="WARNING" />
        <flag name="--logging_level" value="INFO" />
      </compiler>
    </builder-plus>

    <assertFileExists file="${project101.simple-compiled.output.js}" />

    <!-- Test "define": goog.DEBUG = false -->
    <assertResourceContains
        resource="${project101.simple-compiled.output.js}"
        value="goog.DEBUG = !1" />

    <!-- Test "define": goog.LOCALE = "de" -->
    <assertResourceContains
        resource="${project101.simple-compiled.output.js}"
        value='goog.LOCALE = "de"' />
  </target>

  
  <target name="test_advanced-compiled">
    <builder-plus outputMode="compiled" forceRecompile="true"
        outputFile="${project101.advanced-compiled.output.js}">
      <namespacelist namespaces="${project101.namespace}" />
      <roots dir="${project101.js.dir}" />
      <roots dir="${closure-library.dir}" />
      <compiler compilationLevel="advanced" />
    </builder-plus>

    <assertFileExists file="${project101.advanced-compiled.output.js}" />
  </target>


  <target name="test_outputMode=MANIFEST">
    <builder-plus outputMode="MANIFEST"
        outputManifest="${project101.outputManifest}">
      <namespacelist namespaces="${project101.namespace}" />
      <roots dir="${project101.js.dir}" />
      <roots dir="${closure-library.dir}" />
    </builder-plus>

    <assertFileExists file="${project101.outputManifest}" />
    <assertResourceContains resource="${project101.outputManifest}"
        value="base.js" />
    <assertResourceContains resource="${project101.outputManifest}"
        value="project101.js" />
  </target>
  
  
  <target name="test_outputManifest">
    <property name="base.js"
        location="${closure-library.dir}/closure/goog/base.js" />

    <builder-plus outputMode="raw"
        outputManifest="${project101.outputManifest}"
        outputFile="${project101.raw.output.js}">
      <mainsources dir="${project101.js.dir}" includes="**/*.js" />
      <roots dir="${closure-library.dir}" />
    </builder-plus>

    <assertFileExists file="${project101.outputManifest}" />

    <pathconvert property="base.js_current-platform">
      <fileset file="${base.js}" />
    </pathconvert>
    <assertResourceContains resource="${project101.outputManifest}"
        value="${base.js_current-platform}" />
    <assertResourceContains resource="${project101.outputManifest}"
        value="project101.js" />
  </target>


  <target name="test_skipCompilationIfOutputFileUpToDate">
    <logcapturer />
    <builder-plus outputMode="compiled"
        outputFile="${project101.whitespace-compiled.output.js}">
      <namespacelist namespaces="${project101.namespace}" />
      <roots dir="${project101.js.dir}" />
      <roots dir="${closure-library.dir}" />
      <compiler compilationLevel="WHITESPACE" prettyPrint="true" />
    </builder-plus>

    <!-- Compilation should be skipped. -->
    <builder-plus outputMode="compiled"
        outputFile="${project101.whitespace-compiled.output.js}">
      <namespacelist namespaces="${project101.namespace}" />
      <roots dir="${project101.js.dir}" />
      <roots dir="${closure-library.dir}" />
      <compiler compilationLevel="WHITESPACE" prettyPrint="true" />
    </builder-plus>

    <assertLogContains text="Output file up-to-date. Compilation skipped." />
  </target>


  <!--
  =============================================================================
    Tests for CSS renaming map attributes
  =============================================================================
  -->

  <import file="${test-projects.dir}/json-in-style/jsonInStyle.xml" />
  <property name="manifest.CLOSURE_COMPILED.txt"
      location="${json-in-style.soy-output.dir}/manifest_closure_compiled.txt" />
  <property name="manifest.CLOSURE_UNCOMPILED.txt"
      location="${json-in-style.soy-output.dir}/manifest_closure_uncompiled.txt" />


  <target name="testInputCssRenamingMap_CLOSURE_COMPILED">
    <stylesheets outputFile="${json-in-style.soy-output.css}"
        outputRenamingMap="${json-in-style.soy.outputRenamingMap_CLOSURE_COMPILED}"
        outputRenamingMapFormat="CLOSURE_COMPILED"
        renamingType="CLOSURE"
        prettyPrint="true">
      <cssfileset dir="${json-in-style.dir}/gss" includes="*.gss" />
    </stylesheets>

    <builder-plus
        cssRenamingMap="${json-in-style.soy.outputRenamingMap_CLOSURE_COMPILED}"
        outputManifest="${manifest.CLOSURE_COMPILED.txt}"
        outputMode="MANIFEST"
        outputFile="${json-in-style.soy.compiled.js}">
      <compiler compilationLevel="advanced" warningLevel="verbose" />
      <mainsources dir="${json-in-style.js.dir}" includes="**/*.js" />
      <roots dir="${closure-library.dir}" />
    </builder-plus>

    <assertFileExists file="${manifest.CLOSURE_COMPILED.txt}" />
    <assertResourceContains resource="${manifest.CLOSURE_COMPILED.txt}"
        value="css_renaming_map_CLOSURE_COMPILED.js" />
  </target>


  <target name="testInputCssRenamingMap_CLOSURE_UNCOMPILED">
    <stylesheets outputFile="${json-in-style.soy-output.css}"
        outputRenamingMap="${json-in-style.soy.outputRenamingMap_CLOSURE_UNCOMPILED}"
        outputRenamingMapFormat="CLOSURE_UNCOMPILED"
        renamingType="CLOSURE"
        prettyPrint="true">
      <cssfileset dir="${json-in-style.dir}/gss" includes="*.gss" />
    </stylesheets>

    <builder-plus
        cssRenamingMap="${json-in-style.soy.outputRenamingMap_CLOSURE_UNCOMPILED}"
        outputManifest="${manifest.CLOSURE_COMPILED.txt}"
        outputMode="MANIFEST">
      <mainsources dir="${json-in-style.js.dir}" includes="**/*.js" />
      <roots dir="${closure-library.dir}" />
    </builder-plus>

    <assertFileExists file="${manifest.CLOSURE_COMPILED.txt}" />
    <assertResourceContains resource="${manifest.CLOSURE_COMPILED.txt}"
        value="css_renaming_map_CLOSURE_COMPILED.js" />
  </target>


  <target name="testInputCssRenamingMap_JSON">
    <stylesheets outputFile="${json-in-style.soy-output.css}"
        outputRenamingMap="${json-in-style.soy.outputRenamingMap_JSON}"
        outputRenamingMapFormat="JSON"
        renamingType="CLOSURE"
        prettyPrint="true">
      <cssfileset dir="${json-in-style.dir}/gss" includes="*.gss" />
    </stylesheets>

    <builder-plus
        cssRenamingMap="${json-in-style.soy.outputRenamingMap_JSON}"
        outputManifest="${manifest.CLOSURE_COMPILED.txt}"
        outputMode="COMPILED"
        outputFile="${json-in-style.soy.compiled.js}">
      <compiler compilationLevel="advanced" warningLevel="verbose" />
      <mainsources dir="${json-in-style.js.dir}" includes="**/*.js" />
      <roots dir="${closure-library.dir}" />
    </builder-plus>

    <assertFileExists file="${manifest.CLOSURE_COMPILED.txt}" />
    <assertResourceContains resource="${manifest.CLOSURE_COMPILED.txt}"
        value="css_renaming_map_CLOSURE_COMPILED.js" />
  </target>


  <target name="testInputCssRenamingMap_PROPERTIES">
    <stylesheets
        outputFile="${json-in-style.soy-output.css}"
        outputRenamingMap="${json-in-style.soy.outputRenamingMap_PROPERTIES}"
        outputRenamingMapFormat="PROPERTIES"
        renamingType="CLOSURE"
        prettyPrint="true">
      <cssfileset dir="${json-in-style.dir}/gss" includes="*.gss" />
    </stylesheets>

    <builder-plus
        cssRenamingMapPropertiesFile="${json-in-style.soy.outputRenamingMap_PROPERTIES}"
        outputManifest="${manifest.CLOSURE_COMPILED.txt}"
        outputMode="MANIFEST">
      <mainsources dir="${json-in-style.js.dir}" includes="**/*.js" />
      <roots dir="${closure-library.dir}" />
    </builder-plus>

    <assertFileExists file="${manifest.CLOSURE_COMPILED.txt}" />
    <assertResourceContains resource="${manifest.CLOSURE_COMPILED.txt}"
        value="css_renaming_map_CLOSURE_COMPILED.js" />
  </target>


  <target name="testOutputCssRenamingMap_CLOSURE_UNCOMPILED">
    <stylesheets outputFile="${json-in-style.soy-output.css}"
        outputRenamingMap="${json-in-style.soy.outputRenamingMap_JSON}"
        outputRenamingMapFormat="JSON"
        renamingType="CLOSURE"
        prettyPrint="true">
      <cssfileset dir="${json-in-style.dir}/gss" includes="*.gss" />
    </stylesheets>

    <!--
      Compilation level WHITESPACE should cause Builder Plus to produce a
      CSS renaming map using format CLOSURE_UNCOMPILED.
    -->
    <builder-plus
        cssRenamingMap="${json-in-style.soy.outputRenamingMap_JSON}"
        outputManifest="${manifest.CLOSURE_UNCOMPILED.txt}"
        outputMode="COMPILED"
        outputFile="${json-in-style.soy.raw.js}">
      <compiler compilationLevel="WHITESPACE" warningLevel="verbose" />
      <mainsources dir="${json-in-style.js.dir}" includes="**/*.js" />
      <roots dir="${closure-library.dir}" />
    </builder-plus>

    <assertFileExists file="${manifest.CLOSURE_UNCOMPILED.txt}" />
    <assertResourceContains resource="${manifest.CLOSURE_UNCOMPILED.txt}"
        value="css_renaming_map_CLOSURE_UNCOMPILED.js" />

    <!-- Generate index.html for testing in browser. -->
    <soy
        cssHandlingScheme="goog"
        cssRenamingMap="${json-in-style.soy.outputRenamingMap_JSON}">
      <soyfileset dir="${json-in-style.soy.dir}" includes="**/*.soy" />
      <rendertemplate
          outputPathFormat="${json-in-style.soy-output.html}"
          templateName="jsonstyle.createIndexHtml">
        <data replaceProperties="true">
          {
            'scriptFiles': [
              '${json-in-style.soy.raw.js}'
            ]
          }
        </data>
      </rendertemplate>
    </soy>
  </target>

  
  <!-- Run this test suite. -->
  <target name="test">
    <antunit>
      <file file="${antunit.dir}/BuilderPlusTest.xml" />
      <plainlistener loglevel="info" />
    </antunit>
  </target>
</project>
