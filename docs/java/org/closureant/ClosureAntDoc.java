/*
 * Copyright (C) 2012 Christopher Peisert. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

package org.closureant;

import com.google.common.base.Charsets;
import com.google.common.base.Strings;
import com.google.common.io.Files;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Task;
import org.closureant.annotations.Required;
import org.closureant.soy.SoyHelper;

import java.io.File;
import java.io.IOException;

/**
 * Ant task to generate HTML documentation for the Closure Ant project.
 *
 * @author cpeisert{at}gmail{dot}com (Christopher Peisert)
 */
public final class ClosureAntDoc extends Task {

  private static final String ANT_DOC_TEMPLATE = "antdoc.createClassDoc";
  private static final String HTML_DOC_TEMPLATE = "htmldoc.createDocument";

  private final SoyHelper.Builder soyHelperBuilder;

  // Attributes
  private File antDocSoyTemplate;
  private File antMetaDocJsonFile;
  private File htmlDocSoyTemplate;
  private File outputDirectory;

  // Nested elements



  /**
   * Constructs a new Ant task.
   */
  public ClosureAntDoc() {
    this.soyHelperBuilder = new SoyHelper.Builder();

    // Attributes
    this.antDocSoyTemplate = null;
    this.antMetaDocJsonFile = null;
    this.htmlDocSoyTemplate = null;
    this.outputDirectory = new File(".");

    // Nested elements

  }


  // Attribute setters

  /**
   * Sets the Soy template to use to generate the HTML body for Ant
   * documentation using data generated by <a target="_blank"
   * href="https://github.com/cpeisert/ant-meta-doc">Ant Meta Doc</a>. The
   * Soy template must have namespace {@code antdoc} and a template named
   * {@code .createClassDoc} that accepts a parameter named {@code antClass}.
   * The {@code antClass} parameter must be a map representing an Ant class
   * following the format generated by Ant Meta Doc.
   *
   * @param file The soy template file for generating the HTML body for Ant
   *     documentation.
   */
  @Required
  public void setAntDocSoyTemplate(File file) {
    this.antDocSoyTemplate = file;
  }

  /**
   * Sets the Ant Meta Doc JSON file. See <a target="_blank"
   * href="https://github.com/cpeisert/ant-meta-doc">Ant Meta Doc</a>.
   *
   * @param file The Ant Meta Doc JSON file.
   */
  @Required
  public void setAntMetaDocJsonFile(File file) {
    this.antMetaDocJsonFile = file;
  }

  /**
   * Sets the Soy template to use for generating the HTML document outline.
   * This template should provide the basic components of an HTML document such
   * as {@code DOCTYPE, html, head, title} and {@code body} tags. The Soy
   * template namespace must be {@code htmldoc} and it must have a template
   * named {@code .createDocument} that accepts the following parameters:
   *
   * <ul>
   *   <li><b>title</b> - The HTML page title.
   *   <li><b>description</b> - The page description.</li>
   *   <li><b>cssFiles</b> - A list of CSS files, where ech list element is
   *       either a URL or a map with following structure (only the href entry
   *       is required):<br>{@code [href: <css-file-url>, rel: <relationship>,
   *       title: <title>, media: <media-descriptor>]}</li>
   *   <li><b>scriptFiles</b> - A list of script files, where each list element
   *       is either a URL or a map with the following structure (only the src
   *       entry is required): {@code [src: <script-file-url>,
   *       type: <MIME_type>, charset: <character_set>, async: "async",
   *       defer: "defer"]}</li>
   *   <li><b>contentHtml</b> - HTML content that goes inside the {@code body>}
   *       tag.</li>
   * </ul>
   *
   * The content of the {@code body} tag is generated by a separate Soy
   * template. See {@link #setAntDocSoyTemplate(java.io.File)}.
   *
   * @param file The Soy template to use for generating the HTML document
   *     outline.
   */
  public void setHtmlDocSoyTemplate(File file) {
    this.htmlDocSoyTemplate = file;
  }

  /**
   * Sets the output directory for writing HTML documentation.
   *
   * @param directory The output directory.
   */
  public void setOutputDirectory(File directory) {
    this.outputDirectory = directory;
  }


  // Nested elements



  /**
   * Executes the Closure Ant Doc task.
   *
   * @throws org.apache.tools.ant.BuildException on error.
   */
  @Override
  public void execute() {
    try {// execute() cannot throw checked IOException due to parent definition
      if (this.antDocSoyTemplate == null) {
        throw new BuildException("required attribute antDocSoyTemplate not set");
      }
      if (this.antMetaDocJsonFile == null) {
        throw new BuildException("required attribute antMetaDocJsonFile not set");
      }
      if (this.htmlDocSoyTemplate == null) {
        throw new BuildException("required attribute htmlDocSoyTemplate not set");
      }
      if (!this.outputDirectory.isDirectory()) {
        throw new BuildException("Attribute outputDirectory must be a "
            + "directory. Found value: " + outputDirectory.getAbsolutePath());
      }

      this.soyHelperBuilder.sourceFile(this.antDocSoyTemplate);
      this.soyHelperBuilder.sourceFile(this.htmlDocSoyTemplate);
      SoyHelper soyHelper = this.soyHelperBuilder.build();

      JsonParser jsonParser = new JsonParser();
      String antMetaDocJson = Files.toString(this.antMetaDocJsonFile,
          Charsets.UTF_8);
      JsonElement rootElement = jsonParser.parse(antMetaDocJson);
      if (rootElement == null) {
        throw new BuildException("No JSON data found in file: "
            + this.antMetaDocJsonFile.getCanonicalPath());
      }
      if (!rootElement.isJsonObject()) {
        throw new BuildException("Ant Meta Doc file must contain a JSON "
            + "object. File: " + this.antMetaDocJsonFile.getCanonicalPath());
      }
      JsonObject jsonMap = rootElement.getAsJsonObject();



    } catch (IOException e) {
      throw new BuildException(e);
    }
  }
}
